#! /usr/bin/env ruby

Main {

  name <<-__

    rego

  __

  description <<-__

    run arbitrary commands easily when files change

  __

  examples <<-__

    ### gem install rego


    # say hai whenever the file foo.txt changes
    #
      ~> rego echo hai -- foo.txt

    # say hai whenever any file (recursively) in bar changes 
    #
      ~> rego echo hai -- ./bar/ 

    # echo *the file that changed* when any file (recursively) in bar changes 
    #
      ~> rego echo "@ was changed" -- ./bar/ 

    # run a specific test whenever anything in lib, test, app, or config changes
    #
      ~> rego ruby -Itest ./test/units/foo_test.rb --name teh_test -- {lib,test,app,config}

    # run a specific test whenever it, or your app, has changed
    #
      ~> rego ruby -Itest @ -- ./test
  __

  def run
    parse_the_command_line
    print_a_summary_of_watched_files
    loop_watching_files_and_running_commands
  end

  def parse_the_command_line
    pos = ARGV.index('--')

=begin
    if pos
      @command = ARGV[0...pos].join(' ')
      @paths = ARGV[pos + 1 .. -1]
    else
      @command = ARGV[0..-1].join(' ')
      @paths = []
    end
=end
    if pos
      @paths = ARGV[0 ... pos]
      @command = ARGV[pos + 1 .. -1].join(' ')
    else
      @paths = []
      @command = ARGV[0..-1].join(' ')
    end
    @command = 'echo @' if @paths.empty?
    @paths = %w[ app lib test config a.rb Rakefile ] if @paths.empty?

    @paths.map!{|path| test(?d, path) ? [path, Dir.glob(File.join(path, '**/**'))] : path}
    @paths.flatten!
    @paths.compact!
    @paths.uniq!
    @paths.map! do |path|
      begin
        Pathname.new(path).realpath.to_s
      rescue Object
        nil
      end
    end
    @paths.compact!
  end

  def print_a_summary_of_watched_files
    puts "## #{ @command }"
    puts "#"
    puts @paths.join("\n")
    puts
  end

  def loop_watching_files_and_running_commands
    directories = []
    files = []
    @paths.each do |path|
      if test(?d, path)
        directories.push(path)
      else
        files.push(path)
        directories.push(File.dirname(path))
      end
    end
    directories.uniq!
    files.uniq!

    stats = {} 

    files.each do |file|
      begin
        stats[file] = File.stat(file)
      rescue
        nil
      end
    end

    fsevent = FSEvent.new

    n = '0'
    line = '#' * 42
    $running = false

    rego = proc do |*args|
      entry = args.shift
      cmd = entry ? @command.gsub(/@/, entry) : @command
      puts line
      say("# rego.#{ n } @ #{ Time.now.strftime('%H:%M:%S') } - #{ cmd }", :bold => true, :color => :green)
      puts
      system(cmd)
      puts
      say("# rego.#{ n } @ #{ Time.now.strftime('%H:%M:%S') } - #{ $?.exitstatus }", :bold => true, :color => :red)
      puts
      n.succ!
    end

    rego[ false ]

    fsevent.watch(directories) do |*args|
      unless $running
        $running = true

        args.flatten.each do |dir|
          glob = File.join(dir, '**/**')
          entries = Dir.glob(glob)

          entries.each do |entry|
            entry = File.expand_path(entry)
            next unless stats.has_key?(entry)

            begin
              stats[entry] ||= File.stat(entry)
              before = stats[entry]
              after = File.stat(entry)
            rescue
              next
            end

            unless before.mtime == after.mtime
              stats[entry] = after
              rego[ entry ]
            end
          end
        end
      end
      $running = false
    end

    fsevent.run
  end
}


BEGIN {
  ANSI = {
    :clear      => "\e[0m",
    :reset      => "\e[0m",
    :erase_line => "\e[K",
    :erase_char => "\e[P",
    :bold       => "\e[1m",
    :dark       => "\e[2m",
    :underline  => "\e[4m",
    :underscore => "\e[4m",
    :blink      => "\e[5m",
    :reverse    => "\e[7m",
    :concealed  => "\e[8m",
    :black      => "\e[30m",
    :red        => "\e[31m",
    :green      => "\e[32m",
    :yellow     => "\e[33m",
    :blue       => "\e[34m",
    :magenta    => "\e[35m",
    :cyan       => "\e[36m",
    :white      => "\e[37m",
    :on_black   => "\e[40m",
    :on_red     => "\e[41m",
    :on_green   => "\e[42m",
    :on_yellow  => "\e[43m",
    :on_blue    => "\e[44m",
    :on_magenta => "\e[45m",
    :on_cyan    => "\e[46m",
    :on_white   => "\e[47m"
  }

  module Kernel
  private
    def say(phrase, *args)
      options = args.last.is_a?(Hash) ? args.pop : {}
      options[:color] = args.shift.to_s.to_sym unless args.empty?
      keys = options.keys
      keys.each{|key| options[key.to_s.to_sym] = options.delete(key)}

      color = options[:color]
      bold = options.has_key?(:bold)

      parts = [phrase]

      if STDOUT.tty?
        parts.unshift(ANSI[color]) if color
        parts.unshift(ANSI[:bold]) if bold
        parts.push(ANSI[:clear]) if parts.size > 1
      end

      method = options[:method] || :puts

      send(method, parts.join)
    end
  end

  require 'pathname'
  this = Pathname.new(__FILE__).realpath.to_s
  bindir = File.dirname(this)
  rootdir = File.dirname(bindir)
  libdir = File.join(rootdir, 'lib')
  rego = File.join(libdir, 'rego.rb')

  require(rego)

  STDOUT.sync = true
  STDERR.sync = true
  STDIN.sync = true
}
